{"version":3,"sources":["components/NameField.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","NameField","update","cb","status","nameError","placeholderName","classes","className","noValidate","autoComplete","Box","TextField","error","helperText","placeholder","required","id","label","variant","onChange","e","target","value","Button","onClick","color","Typography","Player","screen","pos","name","console","log","this","page","fill","textWidth","clear","square","size","text","render","canvas","createGraphics","noStroke","data","image","x","y","Game","socket","players","selectPlayer","p","hasOwnProperty","windowWidth","windowHeight","addPlayer","Sketch","p5","select","on","state","col","background","bg","player","draw","setup","document","getElementById","createCanvas","Date","getTime","setInterval","currentTime","emit","movement","up","down","left","right","addEventListener","event","key","gRef","React","createRef","useEffect","current","maxHeight","height","width","ref","fetch","require","App","useState","serverAvailable","setServerAvailable","playerName","setPlayerName","setNameError","joined","setJoined","checkStatus","res","ok","statusText","then","socketIOClient","n","disconnect","Fragment","CssBaseline","Container","display","flexDirection","borderBottom","component","justifyContent","alignItems","flexGrow","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.11ed9a3a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Box, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction NameField({ update, cb, status, nameError, placeholderName }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {status ? (\r\n        <form className={classes.root} noValidate autoComplete=\"off\">\r\n          <Box>\r\n            <TextField\r\n              error={nameError}\r\n              helperText={nameError ? \"Try a different name\" : null}\r\n              placeholder={placeholderName}\r\n              required\r\n              id=\"outlined-required\"\r\n              label=\"Name\"\r\n              variant=\"outlined\"\r\n              onChange={(e) => update(e.target.value)}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Button onClick={cb} variant=\"contained\" color=\"primary\">\r\n              Play\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      ) : (\r\n        <Typography>Server is {status ? null : \"not \"}running</Typography>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport { NameField };\r\n","import React, { useEffect } from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport p5 from \"p5\";\r\n\r\nclass Character {\r\n  constructor(screen, pos, color, size, name) {\r\n    this.pos = pos;\r\n    this.size = size;\r\n    this.name = name;\r\n    this.color = color;\r\n    this.canvas = screen;\r\n    this.page = screen.createGraphics(size, size);\r\n    this.page.clear();\r\n    this.page.noStroke();\r\n  }\r\n  update(data) {\r\n    const { pos } = data;\r\n    this.pos = pos;\r\n  }\r\n  render() {\r\n    this.canvas.image(this.page, this.pos.x, this.pos.y, this.size, this.size);\r\n  }\r\n}\r\n\r\nclass Player extends Character {\r\n  constructor(screen, pos, color, name) {\r\n    super(screen, pos, color, 50, name);\r\n    console.log(this.name, this.pos);\r\n  }\r\n  draw() {\r\n    this.page.fill(this.color);\r\n    let textWidth = this.page.textWidth(this.name);\r\n\r\n    this.page.clear();\r\n    this.page.square(0, 0, this.size);\r\n    this.page.fill(0);\r\n    this.page.text(this.name, this.size / 2 - textWidth / 2, this.size - 5);\r\n\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default function Game({ socket }) {\r\n  const players = {};\r\n  function addPlayer(p, screen) {\r\n    players[p.name] = new Player(\r\n      screen,\r\n      { x: screen.windowWidth / 2, y: screen.windowHeight / 2 },\r\n      p.color,\r\n      p.name\r\n    );\r\n  }\r\n  // function removePlayer(name) {\r\n  //   delete players[name];\r\n  // }\r\n  function selectPlayer(p, screen) {\r\n    if (!players.hasOwnProperty(p.name)) {\r\n      addPlayer(p, screen);\r\n    }\r\n    return players[p.name];\r\n  }\r\n\r\n  const Sketch = (p5) => {\r\n    function select(p) {\r\n      return selectPlayer(p, p5);\r\n    }\r\n    function bg(col = 0) {\r\n      p5.background(col);\r\n    }\r\n\r\n    socket.on(\"state\", (state) => {\r\n      bg(0);\r\n      for (let player of state) {\r\n        let p = select(player, p5);\r\n        p.update(player);\r\n        p.draw();\r\n      }\r\n    });\r\n\r\n    p5.setup = () => {\r\n      const gameContainer = document.getElementById(\"gameContainer\");\r\n      p5.createCanvas(p5.windowWidth, p5.windowHeight);\r\n      p5.background(0);\r\n      p5.noStroke();\r\n    };\r\n\r\n    let lastUpdateTime = new Date().getTime();\r\n    setInterval(function () {\r\n      let currentTime = new Date().getTime();\r\n      // let timeDifference = currentTime - lastUpdateTime;\r\n\r\n      socket.emit(\"movement\", movement);\r\n\r\n      lastUpdateTime = currentTime;\r\n    }, 1000 / 60);\r\n  };\r\n\r\n  // Keybinds\r\n  const movement = {\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false,\r\n  };\r\n  document.addEventListener(\"keydown\", function (event) {\r\n    switch (event.key) {\r\n      case \"w\":\r\n      case \"ArrowUp\":\r\n        movement.up = true;\r\n        break;\r\n      case \"a\":\r\n      case \"ArrowLeft\":\r\n        movement.left = true;\r\n        break;\r\n      case \"s\":\r\n      case \"ArrowDown\":\r\n        movement.down = true;\r\n        break;\r\n      case \"d\":\r\n      case \"ArrowRight\":\r\n        movement.right = true;\r\n        break;\r\n      default:\r\n        console.log(`${event.key} is not bound to an action`);\r\n    }\r\n  });\r\n  document.addEventListener(\"keyup\", function (event) {\r\n    switch (event.key) {\r\n      case \"w\":\r\n      case \"ArrowUp\":\r\n        movement.up = false;\r\n        break;\r\n      case \"a\":\r\n      case \"ArrowLeft\":\r\n        movement.left = false;\r\n        break;\r\n      case \"s\":\r\n      case \"ArrowDown\":\r\n        movement.down = false;\r\n        break;\r\n      case \"d\":\r\n      case \"ArrowRight\":\r\n        movement.right = false;\r\n        break;\r\n      default:\r\n        console.log(`${event.key} is not bound to an action`);\r\n    }\r\n  });\r\n\r\n  let gRef = React.createRef();\r\n\r\n  useEffect(() => {\r\n    new p5(Sketch, gRef.current);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      maxHeight=\"800px\"\r\n      height=\"100%\"\r\n      width=\"100%\"\r\n      id=\"gameContainer\"\r\n      ref={gRef}\r\n    ></Box>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { CssBaseline, Typography, Container, Box } from \"@material-ui/core\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { NameField } from \"./components/NameField\";\r\nimport Game from \"./components/Game\";\r\n\r\nconst fetch = require(\"node-fetch\");\r\n\r\nconst serverUrl =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:8080\"\r\n    : \"http://82.45.108.39:3001\";\r\nlet socket;\r\n\r\nfunction App() {\r\n  const [serverAvailable, setServerAvailable] = React.useState(false);\r\n  const [playerName, setPlayerName] = React.useState(\"Barry\");\r\n  const [nameError, setNameError] = React.useState(false);\r\n  const [joined, setJoined] = React.useState(false);\r\n\r\n  function updateName(n) {\r\n    setPlayerName(n);\r\n    setNameError(false);\r\n  }\r\n\r\n  function checkStatus(res) {\r\n    if (res.ok) {\r\n      // res.status >= 200 && res.status < 300\r\n      setServerAvailable(true);\r\n      return res;\r\n    } else {\r\n      throw res.statusText;\r\n    }\r\n  }\r\n  function load() {\r\n    fetch(serverUrl)\r\n      .then(checkStatus)\r\n      .then(() => {\r\n        socket = socketIOClient(serverUrl);\r\n        socket.on(\"nameTaken\", (n) => {\r\n          setNameError(true);\r\n          console.log(`${n} is already taken`);\r\n        });\r\n        socket.on(\"joined\", (n) => {\r\n          console.log(`${n} joined`);\r\n          setJoined(true);\r\n        });\r\n        return () => socket.disconnect();\r\n      });\r\n  }\r\n\r\n  function join() {\r\n    socket.emit(\"name\", playerName);\r\n  }\r\n\r\n  useEffect(load, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n        {joined ? (\r\n          <Game socket={socket}></Game>\r\n        ) : (\r\n          <Container>\r\n            <Box display=\"flex\" flexDirection=\"column\" height=\"100vh\">\r\n              <Box borderBottom={1}>\r\n                <Typography variant=\"h2\" component=\"h1\">\r\n                  Gam\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                flexGrow={1}\r\n              >\r\n                <NameField\r\n                  status={serverAvailable}\r\n                  update={updateName}\r\n                  nameError={nameError}\r\n                  placeholderName={playerName}\r\n                  cb={join}\r\n                ></NameField>\r\n              </Box>\r\n            </Box>\r\n          </Container>\r\n        )}\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}